{# @var craft \craft\web\twig\variables\CraftVariable #}
{#
/**
 * Total Cookie Consent plugin for Craft CMS 3.x
 *
 * Total Cookie Consent Settings.twig
 *
 * @author    Pageworks
 * @copyright Copyright (c) 2020 Pageworks
 * @link      https://www.page.works/
 * @package   TotalCookieConsent
 * @since     1.0.0
 */
#}

{% import "_includes/forms" as forms %}

{{ forms.selectField({
    label: 'Default Consent Banner',
    instructions: 'All users will be presented the default banner unless their location requires something different.',
    id: 'defaultConsentType',
    name: 'defaultConsentType',
    value: settings['defaultConsentType'],
    options: {
        none: 'None'|t('total-cookie-consent'),
        implied: 'Implied'|t('total-cookie-consent'),
        explicit: 'Explicit'|t('total-cookie-consent'),
    }
})
}}

{{ forms.textareaField({
    label: 'Implied Consent Banner',
    id: 'impliedCopy',
    name: 'impliedCopy',
    value: settings['impliedCopy']
})
}}

{{ forms.textField({
    label: 'Cookie Policy URL',
    id: 'cookiePolicyLink',
    name: 'cookiePolicyLink',
    value: settings['cookiePolicyLink']
})
}}

{{ forms.editableTableField({
    label: 'Consent Types',
    instructions: 'What types of cookie consent can your visitors give?',
    id: 'consentTypes',
    name: 'consentTypes',
    rows: settings['consentTypes'],
    cols: {
        name: {
            heading: 'Name',
            type: 'text',
        },
        handle: {
            heading: 'Handle',
            type: 'text',
        },
        description: {
            heading: 'Description',
            type: 'text',
        },
        url: {
            heading: 'URL',
            type: 'text',
            info: 'Link to your privacy policy'
        },
        defaultOn: {
            heading: 'Default On',
            type: 'lightswitch',
        },
        required: {
            heading: 'Required',
            type: 'lightswitch',
        }
    }
})
}}
<script>
    var inputs = [];

    function camelize(str) {
        return str.toLowerCase().replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {
            return index === 0 ? word.toLowerCase() : word.toUpperCase();
        }).replace(/\s+/g, '');
    }

    function handleKey(e){
        var hanldeInput = null;
        for (var k = 0; k < inputs.length; k++){
            if (inputs[k].id === parseInt(e.currentTarget.dataset.id)){
                handleInput = inputs[k].handle;
                break;
            }
        }
        handleInput.value = camelize(e.currentTarget.value);
    }

    function hijackInputs(){
        var table = document.body.querySelector('#settings-consentTypes');
        var rows = Array.from(table.querySelectorAll('tbody tr'));

        if (inputs.length){
            for (var i = 0; i < inputs.length; i++){
                inputs[i].name.removeEventListener('keyup', handleKey);
            }
        }
        inputs = [];
        for (var i = 0; i < rows.length; i++){
            var nameInput = rows[i].querySelector('[name="settings[consentTypes][' + i + '][name]"]');
            var handleInput = rows[i].querySelector('[name="settings[consentTypes][' + i + '][handle]"]');
            inputs.push({
                id: i,
                name: nameInput,
                handle: handleInput
            });
            nameInput.dataset.id = i;
            nameInput.addEventListener('keyup', handleKey);
            handleInput.value = camelize(nameInput.value);
        }
    }
    hijackInputs();

    function addRow(){
        setTimeout(function(){
            hijackInputs();
        }, 150)
    }

    var addRowButton = document.body.querySelector('#settings-consentTypes-field .btn.add');
    addRowButton.addEventListener('click', addRow);
</script>

{{ forms.textField({
    label: 'API Key',
    instructions: 'To enable geolocation based banners get an API key from https://ipapi.com/',
    id: 'ipapiKey',
    name: 'ipapiKey',
    value: settings['ipapiKey']
})
}}

{{ forms.editableTableField({
    label: 'Countries',
    instructions: 'Show a specific banner based on the visitors country.',
    id: 'countriesTable',
    name: 'countriesTable',
    rows: settings['countriesTable'],
    cols: {
        countryCode: {
            heading: 'ISO Code',
            type: 'text',
            info: 'Alpha-2 ISO codes'
        },
        bannerType: {
            heading: 'Banner Type',
            type: 'select',
            options: {
                implied: 'Implied'|t('total-cookie-consent'),
                explicit: 'Explicit'|t('total-cookie-consent'),
            }
        }
    }
})
}}

{{ forms.editableTableField({
    label: 'Regions',
    instructions: 'Show a specific banner based on the visitors state or territory.',
    id: 'regionsTable',
    name: 'regionsTable',
    rows: settings['regionsTable'],
    cols: {
        countryCode: {
            heading: 'Country ISO Code',
            type: 'text',
            info: 'Alpha-2 ISO codes'
        },
        regionCode: {
            heading: 'Region ISO Code',
            type: 'text',
            info: 'Alpha-2 ISO codes'
        },
        bannerType: {
            heading: 'Banner Type',
            type: 'select',
            options: {
                implied: 'Implied'|t('total-cookie-consent'),
                explicit: 'Explicit'|t('total-cookie-consent'),
            }
        }
    }
})
}}

{{ forms.lightswitchField({
    label: 'Test Mode',
    id: 'testMode',
    name: 'testMode',
    on: settings['testMode']
})
}}

{{ forms.textField({
    label: 'Test IP Address',
    id: 'testIp',
    name: 'testIp',
    value: settings['testIp']
})
}}